diff --git a/cmake/catkin_package.cmake b/cmake/catkin_package.cmake
index 7d56edf..346dc0e 100644
--- a/cmake/catkin_package.cmake
+++ b/cmake/catkin_package.cmake
@@ -430,6 +430,31 @@ function(_catkin_package)
   # package cmake dir is the folder where the generated pkgConfig.cmake is located
   set(PKG_CMAKE_DIR "\${${PROJECT_NAME}_DIR}")
 
+  # strip SYSROOT prefixes for each element in LIST
+  macro(catkin_strip_sysroot)
+    cmake_parse_arguments(_fn "UNIQUE" "LIST" "" ${ARGN})
+    set(_list ${${_fn_LIST}})
+    set(${_fn_LIST})
+    foreach(_ele ${_list})
+      if(IS_ABSOLUTE ${_ele})
+        foreach(_path ${CMAKE_FIND_ROOT_PATH})
+          string(REGEX REPLACE "^${_path}" "" _ele ${_ele})
+        endforeach()
+      endif()
+      if(_fn_UNIQUE)
+        list_append_unique(${_fn_LIST} ${_ele})
+      else()
+        list(APPEND ${_fn_LIST} ${_ele})
+      endif()
+    endforeach()
+  endmacro()
+
+  catkin_strip_sysroot(LIST PROJECT_CMAKE_CONFIG_INCLUDE_DIRS UNIQUE)
+  catkin_strip_sysroot(LIST PROJECT_PKG_CONFIG_INCLUDE_DIRS UNIQUE)
+  catkin_strip_sysroot(LIST PKG_CONFIG_LIBRARIES)
+  catkin_strip_sysroot(LIST PKG_CONFIG_LIBRARIES_WITH_PREFIX)
+  catkin_strip_sysroot(LIST PKG_CONFIG_LIB_PATHS UNIQUE)
+
   if(NOT PROJECT_SKIP_PKG_CONFIG_GENERATION)
     # ensure that output folder exists
     file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/catkin_generated/installspace)
diff --git a/cmake/templates/pkgConfig.cmake.in b/cmake/templates/pkgConfig.cmake.in
index d99b811..ba9fe28 100644
--- a/cmake/templates/pkgConfig.cmake.in
+++ b/cmake/templates/pkgConfig.cmake.in
@@ -95,8 +95,16 @@ if(NOT "@PROJECT_CMAKE_CONFIG_INCLUDE_DIRS@ " STREQUAL " ")
   set(@PROJECT_NAME@_INCLUDE_DIRS "")
   set(_include_dirs "@PROJECT_CMAKE_CONFIG_INCLUDE_DIRS@")
   foreach(idir ${_include_dirs})
-    if(IS_ABSOLUTE ${idir} AND IS_DIRECTORY ${idir})
-      set(include ${idir})
+    if(IS_ABSOLUTE ${idir})
+      get_filename_component(path ${idir} DIRECTORY)
+      get_filename_component(idir ${idir} NAME)
+      set(include "include-NOTFOUND")
+      find_path(include ${idir}
+        PATHS ${path}
+        NO_DEFAULT_PATH)
+      if(NOT include)
+        message(FATAL_ERROR "Project '@PROJECT_NAME@' specifies '${idir}' as an include dir, which is not found.  It does neither exist as an absolute directory nor in '@PKG_INCLUDE_PREFIX@/${idir}'.  Ask the maintainer '@PROJECT_MAINTAINER@' to fix it.")
+      endif()
     elseif("${idir} " STREQUAL "@CATKIN_GLOBAL_INCLUDE_DESTINATION@ ")
       get_filename_component(include "${@PROJECT_NAME@_DIR}/../../../@CATKIN_GLOBAL_INCLUDE_DESTINATION@" ABSOLUTE)
       if(NOT IS_DIRECTORY ${include})
@@ -117,15 +125,25 @@ foreach(library ${libraries})
   elseif(TARGET ${library})
     list(APPEND @PROJECT_NAME@_LIBRARIES ${library})
   elseif(IS_ABSOLUTE ${library})
-    list(APPEND @PROJECT_NAME@_LIBRARIES ${library})
+    get_filename_component(path ${library} DIRECTORY)
+    get_filename_component(library ${library} NAME)
+    set(lib "lib-NOTFOUND")
+    find_library(lib ${library}
+      PATHS ${path}
+      NO_DEFAULT_PATH)
+    if(NOT lib)
+      message(FATAL_ERROR "Project '${PROJECT_NAME}' tried to find library '${library}'.  The library is neither a target nor built/installed properly.  Did you compile project '@PROJECT_NAME@'?  Did you find_package() it before the subdirectory containing its code is included?")
+    endif()
+    _list_append_unique(@PROJECT_NAME@_LIBRARY_DIRS ${path})
+    list(APPEND @PROJECT_NAME@_LIBRARIES ${lib})
   else()
     set(lib_path "")
-    set(lib "${library}-NOTFOUND")
+    set(lib "lib-NOTFOUND")
     # since the path where the library is found is returned we have to iterate over the paths manually
     foreach(path @PKG_CONFIG_LIB_PATHS@)
       find_library(lib ${library}
         PATHS ${path}
-        NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
+        NO_DEFAULT_PATH)
       if(lib)
         set(lib_path ${path})
         break()
