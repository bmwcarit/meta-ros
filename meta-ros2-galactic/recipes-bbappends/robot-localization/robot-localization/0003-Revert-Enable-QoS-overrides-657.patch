From 6627a8175bf07a9b4381d7508d4d5fca398678af Mon Sep 17 00:00:00 2001
From: Audrow Nash <audrow@hey.com>
Date: Tue, 25 May 2021 13:37:24 -0700
Subject: [PATCH] Revert "Enable QoS overrides (#657)"

This reverts commit 2816e92f6b41fd4d7780e2cb2f383411edefb4d7.

Upstream-Status: Backport [https://github.com/cra-ros-pkg/robot_localization/pull/670]

Signed-off-by: Martin Jansa <martin.jansa@lge.com>
---
 .../ros_robot_localization_listener.hpp       | 17 +----------------
 src/navsat_transform.cpp                      | 19 +++++--------------
 src/ros_filter.cpp                            |  7 ++-----
 src/ros_robot_localization_listener.cpp       |  7 +++----
 4 files changed, 11 insertions(+), 39 deletions(-)

diff --git a/include/robot_localization/ros_robot_localization_listener.hpp b/include/robot_localization/ros_robot_localization_listener.hpp
index 333c538..4f50d4a 100644
--- a/include/robot_localization/ros_robot_localization_listener.hpp
+++ b/include/robot_localization/ros_robot_localization_listener.hpp
@@ -49,18 +49,6 @@
 namespace robot_localization
 {
 
-namespace detail
-{
-rclcpp::SubscriptionOptions
-get_subscription_options_with_default_qos_override_policies()
-{
-  auto subscription_options = rclcpp::SubscriptionOptions();
-  subscription_options.qos_overriding_options =
-    rclcpp::QosOverridingOptions::with_default_policies();
-  return subscription_options;
-}
-}  // namespace detail
-
 //! @brief RosRobotLocalizationListener class
 //!
 //! This class wraps the RobotLocalizationEstimator. It listens to topics over
@@ -82,10 +70,7 @@ public:
   //!
   //! @param[in] node - rclcpp node shared pointer
   //!
-  explicit RosRobotLocalizationListener(
-    rclcpp::Node::SharedPtr node,
-    rclcpp::SubscriptionOptions options =
-    detail::get_subscription_options_with_default_qos_override_policies());
+  explicit RosRobotLocalizationListener(rclcpp::Node::SharedPtr node);
 
   //! @brief Destructor
   //!
diff --git a/src/navsat_transform.cpp b/src/navsat_transform.cpp
index 74be08f..1df5c1f 100644
--- a/src/navsat_transform.cpp
+++ b/src/navsat_transform.cpp
@@ -170,32 +170,23 @@ NavSatTransform::NavSatTransform(const rclcpp::NodeOptions & options)
 
   auto custom_qos = rclcpp::SensorDataQoS(rclcpp::KeepLast(1));
 
-  auto subscriber_options = rclcpp::SubscriptionOptions();
-  subscriber_options.qos_overriding_options =
-    rclcpp::QosOverridingOptions::with_default_policies();
   odom_sub_ = this->create_subscription<nav_msgs::msg::Odometry>(
-    "odometry/filtered", custom_qos, std::bind(
-      &NavSatTransform::odomCallback, this, _1), subscriber_options);
+    "odometry/filtered", custom_qos, std::bind(&NavSatTransform::odomCallback, this, _1));
 
   gps_sub_ = this->create_subscription<sensor_msgs::msg::NavSatFix>(
-    "gps/fix", custom_qos, std::bind(&NavSatTransform::gpsFixCallback, this, _1),
-    subscriber_options);
+    "gps/fix", custom_qos, std::bind(&NavSatTransform::gpsFixCallback, this, _1));
 
   if (!use_odometry_yaw_ && !use_manual_datum_) {
     imu_sub_ = this->create_subscription<sensor_msgs::msg::Imu>(
-      "imu", custom_qos, std::bind(&NavSatTransform::imuCallback, this, _1), subscriber_options);
+      "imu", custom_qos, std::bind(&NavSatTransform::imuCallback, this, _1));
   }
 
-  rclcpp::PublisherOptions publisher_options;
-  publisher_options.qos_overriding_options = rclcpp::QosOverridingOptions::with_default_policies();
   gps_odom_pub_ =
-    this->create_publisher<nav_msgs::msg::Odometry>(
-    "odometry/gps", rclcpp::QoS(10), publisher_options);
+    this->create_publisher<nav_msgs::msg::Odometry>("odometry/gps", rclcpp::QoS(10));
 
   if (publish_gps_) {
     filtered_gps_pub_ =
-      this->create_publisher<sensor_msgs::msg::NavSatFix>(
-      "gps/filtered", rclcpp::QoS(10), publisher_options);
+      this->create_publisher<sensor_msgs::msg::NavSatFix>("gps/filtered", rclcpp::QoS(10));
   }
 
   // Sleep for the parameterized amount of time, to give
diff --git a/src/ros_filter.cpp b/src/ros_filter.cpp
index 58a7339..13fa463 100644
--- a/src/ros_filter.cpp
+++ b/src/ros_filter.cpp
@@ -1970,17 +1970,14 @@ void RosFilter<T>::initialize()
     tf2::toMsg(tf2::Transform::getIdentity());
 
   // Position publisher
-  rclcpp::PublisherOptions publisher_options;
-  publisher_options.qos_overriding_options = rclcpp::QosOverridingOptions::with_default_policies();
   position_pub_ =
-    this->create_publisher<nav_msgs::msg::Odometry>(
-    "odometry/filtered", rclcpp::QoS(10), publisher_options);
+    this->create_publisher<nav_msgs::msg::Odometry>("odometry/filtered", rclcpp::QoS(10));
 
   // Optional acceleration publisher
   if (publish_acceleration_) {
     accel_pub_ =
       this->create_publisher<geometry_msgs::msg::AccelWithCovarianceStamped>(
-      "accel/filtered", rclcpp::QoS(10), publisher_options);
+      "accel/filtered", rclcpp::QoS(10));
   }
 
   const std::chrono::duration<double> timespan{1.0 / frequency_};
diff --git a/src/ros_robot_localization_listener.cpp b/src/ros_robot_localization_listener.cpp
index a6faeae..da6917f 100644
--- a/src/ros_robot_localization_listener.cpp
+++ b/src/ros_robot_localization_listener.cpp
@@ -75,12 +75,11 @@ FilterTypes::FilterType filterTypeFromString(
 }
 
 RosRobotLocalizationListener::RosRobotLocalizationListener(
-  rclcpp::Node::SharedPtr node,
-  rclcpp::SubscriptionOptions options)
+  rclcpp::Node::SharedPtr node)
 : qos1_(1),
   qos10_(10),
-  odom_sub_(node, "odom/filtered", qos1_.get_rmw_qos_profile(), options),
-  accel_sub_(node, "acceleration/filtered", qos1_.get_rmw_qos_profile(), options),
+  odom_sub_(node, "odom/filtered", qos1_.get_rmw_qos_profile()),
+  accel_sub_(node, "acceleration/filtered", qos1_.get_rmw_qos_profile()),
   sync_(odom_sub_, accel_sub_, 10u),
   node_clock_(node->get_node_clock_interface()->get_clock()),
   node_logger_(node->get_node_logging_interface()),
