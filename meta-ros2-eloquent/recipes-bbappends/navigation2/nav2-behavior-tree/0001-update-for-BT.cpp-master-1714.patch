From 02739feda8077e1c886e1e9dc98cfbb82dc174cf Mon Sep 17 00:00:00 2001
From: Steve Macenski <stevenmacenski@gmail.com>
Date: Sat, 9 May 2020 13:36:09 -0700
Subject: [PATCH] update for BT.cpp master (#1714)

Upstream-Status: Backport [https://github.com/ros-planning/navigation2/commit/50b044a863fa8b470bd862c72e1e5b30d672e840]

Signed-off-by: Martin Jansa <martin.jansa@lge.com>
---
 include/nav2_behavior_tree/behavior_tree_engine.hpp | 9 ---------
 plugins/control/pipeline_sequence.cpp               | 4 ++--
 plugins/control/recovery_node.cpp                   | 4 ++--
 plugins/control/round_robin_node.cpp                | 4 ++--
 plugins/decorator/rate_controller.cpp               | 2 --
 src/behavior_tree_engine.cpp                        | 4 ++--
 6 files changed, 8 insertions(+), 19 deletions(-)

diff --git a/include/nav2_behavior_tree/behavior_tree_engine.hpp b/include/nav2_behavior_tree/behavior_tree_engine.hpp
index dccf466e..9f9d583d 100644
--- a/include/nav2_behavior_tree/behavior_tree_engine.hpp
+++ b/include/nav2_behavior_tree/behavior_tree_engine.hpp
@@ -54,15 +54,6 @@ public:
     BT::applyRecursiveVisitor(root_node, visitor);
   }
 
-  // In order to re-run a Behavior Tree, we must be able to reset all nodes to the initial state
-  void resetTree(BT::TreeNode * root_node)
-  {
-    auto visitor = [](BT::TreeNode * node) {
-        node->setStatus(BT::NodeStatus::IDLE);
-      };
-    BT::applyRecursiveVisitor(root_node, visitor);
-  }
-
 protected:
   // The factory that will be used to dynamically construct the behavior tree
   BT::BehaviorTreeFactory factory_;
diff --git a/plugins/control/pipeline_sequence.cpp b/plugins/control/pipeline_sequence.cpp
index 7c7dcf70..75333b4a 100644
--- a/plugins/control/pipeline_sequence.cpp
+++ b/plugins/control/pipeline_sequence.cpp
@@ -82,7 +82,7 @@ BT::NodeStatus PipelineSequence::tick()
     auto status = children_nodes_[i]->executeTick();
     switch (status) {
       case BT::NodeStatus::FAILURE:
-        haltChildren(0);
+        ControlNode::haltChildren();
         last_child_ticked_ = 0;  // reset
         return status;
         break;
@@ -106,7 +106,7 @@ BT::NodeStatus PipelineSequence::tick()
     }
   }
   // Wrap up.
-  haltChildren(0);
+  ControlNode::haltChildren();
   last_child_ticked_ = 0;  // reset
   return BT::NodeStatus::SUCCESS;
 }
diff --git a/plugins/control/recovery_node.cpp b/plugins/control/recovery_node.cpp
index 945f8f8a..2a213cfa 100644
--- a/plugins/control/recovery_node.cpp
+++ b/plugins/control/recovery_node.cpp
@@ -88,7 +88,7 @@ private:
                 current_child_idx_++;
                 break;
               } else {
-                haltChildren(0);
+                ControlNode::haltChildren();
                 return BT::NodeStatus::FAILURE;
               }
             }
@@ -111,7 +111,7 @@ private:
             {
               retry_count_++;
               current_child_idx_--;
-              haltChildren(1);
+              ControlNode::haltChildren();
             }
             break;
 
diff --git a/plugins/control/round_robin_node.cpp b/plugins/control/round_robin_node.cpp
index 95b1c96e..be85e75e 100644
--- a/plugins/control/round_robin_node.cpp
+++ b/plugins/control/round_robin_node.cpp
@@ -46,11 +46,11 @@ public:
           current_child_idx_ = 0;
         }
 
-        haltChildren(0);
+        ControlNode::haltChildren();
         return BT::NodeStatus::SUCCESS;
 
       case BT::NodeStatus::FAILURE:
-        haltChildren(0);
+        ControlNode::haltChildren();
         return BT::NodeStatus::FAILURE;
 
       case BT::NodeStatus::RUNNING:
diff --git a/plugins/decorator/rate_controller.cpp b/plugins/decorator/rate_controller.cpp
index a80e1d07..2c972eac 100644
--- a/plugins/decorator/rate_controller.cpp
+++ b/plugins/decorator/rate_controller.cpp
@@ -86,13 +86,11 @@ inline BT::NodeStatus RateController::tick()
         return BT::NodeStatus::RUNNING;
 
       case BT::NodeStatus::SUCCESS:
-        child_node_->setStatus(BT::NodeStatus::IDLE);
         start_ = std::chrono::high_resolution_clock::now();  // Reset the timer
         return BT::NodeStatus::SUCCESS;
 
       case BT::NodeStatus::FAILURE:
       default:
-        child_node_->setStatus(BT::NodeStatus::IDLE);
         return BT::NodeStatus::FAILURE;
     }
   }
diff --git a/src/behavior_tree_engine.cpp b/src/behavior_tree_engine.cpp
index acf962d3..36b852e6 100644
--- a/src/behavior_tree_engine.cpp
+++ b/src/behavior_tree_engine.cpp
@@ -47,11 +47,11 @@ BehaviorTreeEngine::run(
   // Loop until something happens with ROS or the node completes
   while (rclcpp::ok() && result == BT::NodeStatus::RUNNING) {
     if (cancelRequested()) {
-      tree->root_node->halt();
+      tree->rootNode()->halt();
       return BtStatus::CANCELED;
     }
 
-    result = tree->root_node->executeTick();
+    result = tree->tickRoot();
 
     onLoop();
 
